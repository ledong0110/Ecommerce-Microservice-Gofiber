version: '3.8'

services:
  nginx:
    build:
      context: ./services/nginx
      dockerfile: Dockerfile
    container_name: nginx
    ports:
      - 8080:80
    # depends_on:
    #   - auth_service
    volumes:
      - ./services/nginx/logs:/var/log/nginx
      - ./services/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - api-network
    

  rabbitmq:
    image: rabbitmq:3.6-management-alpine
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ./services/broker/data/:/var/lib/rabbitmq
      - ./services/broker/log/:/var/log/rabbitmq
    networks:
      - message-queue-network

  auth_service:
    container_name: auth_service
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    ports:
      - 8000:80
  
    environment:
      - PORT=80
      - DB_USER=test
      - DB_PWD=test@2023
      - DB_HOST=mysql
      - DB_NAME=ecommerce_microservice
      - REFRESH_TOKEN_SECRET=biggroup1_sad
      - ACCESS_TOKEN_SECRET=sad
      - OTP_CREDENTIAL=sadotpgroup1
      - AMQP_SERVER_URL=amqp://guest:guest@rabbitmq/
    networks:
      - api-network
      - message-queue-network
    depends_on:
      - rabbitmq
      - db
    
  product_service:
    container_name: product_service
    build:
      context: ./services/product-service
      dockerfile: Dockerfile
    # ports:
    #   - 8001:80
  
    environment:
      - PORT=80
      - DB_USER=test
      - DB_PWD=test@2023
      - DB_HOST=mysql
      - DB_NAME=ecommerce_microservice
      - REFRESH_TOKEN_SECRET=biggroup1_sad
      - ACCESS_TOKEN_SECRET=sad
      - OTP_CREDENTIAL=sadotpgroup1
      - AMQP_SERVER_URL=amqp://guest:guest@rabbitmq/
    networks:
      - api-network
      - message-queue-network
    depends_on:
      - rabbitmq
      - db

  email_service:
    container_name: email_service
    build:
      context: ./services/email-service
      dockerfile: Dockerfile
    environment:
      - AMQP_SERVER_URL=amqp://guest:guest@rabbitmq/
      - MAIL_USER=ducdong0110@gmail.com
      - MAIL_TOKEN=ndqksukidclyonim
    networks:
      - message-queue-network
    depends_on:
      - rabbitmq

  db:
    container_name: mysql
    build:
      context: ./services/database-service
      dockerfile: Dockerfile
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=ecommerce_sad
    volumes:
    - mysql-data:/var/lib/mysql

    networks:
      - share-network
      - api-network
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.3.2
    ports:
      - 9300:9300
      - 9200:9200
    environment:
      - http.cors.enabled=true
      - http.cors.allow-origin=*
      - http.cors.allow-methods=OPTIONS,HEAD,GET,POST,PUT,DELETE
      - http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
      - transport.host=127.0.0.1
      - cluster.name=docker-cluster
      - cluster.routing.allocation.disk.threshold_enabled=false
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - share-network
  kibana:
    image: docker.elastic.co/kibana/kibana:7.3.2
    ports:
      - 5601:5601
    networks:
      - share-network
    depends_on:
      - elasticsearch
  logstash:
    build: 
      context: ./services/query-service/logstash
      dockerfile: Dockerfile
    environment:
      - LOGSTASH_JDBC_URL=jdbc:mysql://mysql:3306/classicmodels?useSSL=false
      - LOGSTASH_JDBC_DRIVER=com.mysql.cj.jdbc.Driver
      - LOGSTASH_JDBC_DRIVER_JAR_LOCATION=/usr/share/logstash/logstash-core/lib/jars/mysql-connector-java.jar
      - LOGSTASH_JDBC_USERNAME=test
      - LOGSTASH_JDBC_PASSWORD=test@2023
      - LOGSTASH_ELASTICSEARCH_HOST=http://elasticsearch:9200
    volumes: 
      - ./services/query-service/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - 9600:9600
      - 5044:5044
    networks:
      - share-network
    depends_on:
      - elasticsearch
      - kibana
      - db


volumes:
  mysql-data:
  elasticsearch_data:

networks:
  message-queue-network:
  share-network:
    driver: bridge
    external: true
  api-network:
    driver: bridge
    external: true